name: Font build
on: 
  push:
    branches:
      - master

# defaults:
#   run:
#     shell: bash

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    # container: 
    #   image: avivace/iosevka-build
    #   options: "--workdir /build"
    #   volumes:
    #     - ${{ github.workspace }}:/build
    
    env:
      FONT_VERSION: 4.1.1

    outputs:
      artifact-name: ${{ steps.set-artifact-name.outputs.artifact-name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Checkout
        uses: actions/checkout@v2
        with: 
          repository: be5invis/Iosevka
          ref: v${{ env.FONT_VERSION }}
          path: Iosevka-${{ env.FONT_VERSION }}
      
      - name: Cache build source
        uses: actions/cache@v2
        with:
          path: ./Iosevka-${{ env.FONT_VERSION }}
          key: font-cache-${{ env.FONT_VERSION }}
          restore-keys: font-cache-
      
      - name: Install Node dependencies
        run: cd Iosevka-${{ env.FONT_VERSION }} && npm install
      
      - name: Copy font config
        run: cp ./private-build-plans.toml ./Iosevka-${{ env.FONT_VERSION }}/

      - name: Test
        run: cd Iosevka* && ls -la .

      - name: Build font
        # run: cd Iosevka-${{ env.FONT_VERSION }} && npm run build -- ttf::pataha
        uses: ./.github/actions/Iosevka
        with:
          plan: pataha
      
      - uses: actions/upload-artifact@v2
        with:
          name: font-binary
          path: ./dist
      
      - id: set-artifact-name
        run: echo "::set-output name=artifact-name::font-binary"
  
  release:
    name: Release
    needs: build
    runs-on: ubuntu-20.04

    steps: 
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: ${{ needs.build.outputs.artifact-name }}
          path: ./
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: false
      #     prerelease: false
        
      # - name: Upload Release Asset
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./my-artifact.zip
      #     asset_name: my-artifact.zip
      #     asset_content_type: application/zip
